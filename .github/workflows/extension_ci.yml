name: PGMQ Extension

defaults:
  run:
    shell: bash
    working-directory: ./pgmq-extension

on:
  pull_request:
    branches:
      - main
    paths:
      - "pgmq-extension/**"
      - ".github/workflows/extension_ci.yml"
  push:
    branches:
      - main
    paths:
      - "pgmq-extension/**"
      - ".github/workflows/extension_ci.yml"
  release:
    types:
      - created

jobs:
  test:
    name: Test üêò ${{ matrix.pg }} with pg_partman ${{ matrix.partman }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        pg: [12, 13, 14, 15, 16, 17]
        partman: [4.7.3, 5.1.0]
        exclude:
          # pg_partman does not support pg < 14
          - pg: 12
            partman: 5.1.0
          - pg: 13
            partman: 5.1.0
    container: pgxn/pgxn-tools
    steps:
      - run: pg-start ${{ matrix.pg }}
        working-directory: ./
      - uses: actions/checkout@v4
      - run: pgxn install 'pg_partman=${{ matrix.partman }}'
      - run: pg-build-test

  publish:
    if: github.repository == 'tembo-io/pgmq'
    name: trunk publish
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # add 17 when trunk supports it
        pg-version: [14, 15, 16]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pgmq-extension-test"
          workspaces: |
            pgmq/pgmq-extension
      - name: Install stoml and pg-trunk
        shell: bash
        run: |
          set -xe
          wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
          mv stoml_linux_amd64 stoml
          chmod +x stoml
          sudo mv stoml /usr/local/bin/
          cargo install pg-trunk
      - name: Make trunk
        run: make Trunk.toml
      - name: trunk build
        run: trunk build --pg-version ${{ matrix.pg-version }}
      - name: trunk publish
        # only publish release events
        if: github.event_name == 'release'
        env:
          TRUNK_API_TOKEN: ${{ secrets.TRUNK_AUTH_TOKEN }}
        run: |
          pgmq_ver=$(stoml Trunk.toml extension.version)
          pgmq_descr=$(stoml Trunk.toml extension.description)
          pgmq_repo=$(stoml Trunk.toml extension.repository)
          trunk publish pgmq --version ${pgmq_ver} --description "A lightweight message queue. Like AWS SQS and RSMQ, on Postgres." --homepage "https://github.com/tembo-io/pgmq" --repository "https://github.com/tembo-io/pgmq" --license "PostgreSQL" --category featured --category orchestration
  build_and_push:
    if: github.repository == 'tembo-io/pgmq'
    name: Build and push images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pg: [14, 15, 16, 17]
    outputs:
      short_sha: ${{ steps.versions.outputs.SHORT_SHA }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Install stoml
        shell: bash
        run: |
          set -xe
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
          mv stoml_linux_amd64 stoml
          chmod +x stoml
          sudo mv stoml /usr/local/bin/

      - name: Set version strings
        id: versions
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "TAG_VER=$(grep 'default_version' pgmq.control | cut -d "'" -f 2)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io/tembo
          username: ${{ secrets.QUAY_USER_TEMBO }}
          password: ${{ secrets.QUAY_PASSWORD_TEMBO }}

      - name: Generate dockerfile from template file
        working-directory: ./
        run: ./images/pgmq-pg/replace-pg-version.sh ${{ matrix.pg }} ./images/pgmq-pg/Dockerfile.in ./images/pgmq-pg/Dockerfile

      - name: Build and push -- Commit
        # push commit build when not a release
        if: github.event_name != 'release'
        uses: docker/build-push-action@v5
        with:
          working-directory: ./
          file: ./images/pgmq-pg/Dockerfile
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            quay.io/tembo/pg${{matrix.pg}}-pgmq:v${{ steps.versions.outputs.SHORT_SHA }}

      - name: Build and push -- Releases
        # only publish release events
        if: github.event_name == 'release'
        uses: docker/build-push-action@v5
        with:
          working-directory: ./
          file: ./images/pgmq-pg/Dockerfile
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            quay.io/tembo/pg${{matrix.pg}}-pgmq:v${{ steps.versions.outputs.TAG_VER }}
            quay.io/tembo/pg${{matrix.pg}}-pgmq:latest
